buildscript {
    ext {
        dockerVersion = '3.3.5'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("com.bmuschko:gradle-docker-plugin:${dockerVersion}")
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

def port = project.ext.port
def tagVersion = project.hasProperty('docker.tag') ? project.property('docker.tag') : version
def applicationName = bootJar.baseName
def dockerUsername = getConfigurationProperty('DOCKER_USERNAME', 'docker.username')

docker {
    registryCredentials {
        username = dockerUsername
        password = getConfigurationProperty('DOCKER_PASSWORD', 'docker.password')
        email = getConfigurationProperty('DOCKER_EMAIL', 'docker.email')
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
    group = 'Docker'
    destFile = project.file('build/docker/Dockerfile')
    from project.findProperty('docker.base')
    maintainer project.findProperty('docker.maintainer')
    copyFile jar.archiveName, "/app/${applicationName}.jar"
    entryPoint 'java'
    defaultCommand '-jar', "/app/${applicationName}.jar"
    if (port) {
        exposePort(*port)
    }
}

task syncWebAppArchive(type: Sync) {
    dependsOn assemble
    from jar.archivePath
    into createDockerfile.destFile.parentFile
}

createDockerfile.dependsOn syncWebAppArchive

task buildImage(type: DockerBuildImage) {
    group = 'Docker'
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = "${dockerUsername}/${projectName}-${applicationName}:${tagVersion}"
}

task pushImage(type: DockerPushImage) {
    group = 'Docker'
    dependsOn buildImage
    conventionMapping.imageName = { buildImage.getTag() }
}

String getConfigurationProperty(String envVar, String sysProp) {
    System.getenv(envVar) ?: project.findProperty(sysProp)
}
